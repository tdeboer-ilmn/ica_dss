# coding: utf-8

"""
    Platform Services API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomCredentialsTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_code': 'str',
        'creation_date': 'datetime',
        'custom_credential_id': 'int',
        'domain': 'str',
        'expireson': 'datetime',
        'lastupdate_date': 'datetime',
        'username': 'str'
    }

    attribute_map = {
        'authorization_code': 'authorizationCode',
        'creation_date': 'creationDate',
        'custom_credential_id': 'custom_credential_id',
        'domain': 'domain',
        'expireson': 'expireson',
        'lastupdate_date': 'lastupdateDate',
        'username': 'username'
    }

    def __init__(self, authorization_code=None, creation_date=None, custom_credential_id=None, domain=None, expireson=None, lastupdate_date=None, username=None):  # noqa: E501
        """CustomCredentialsTO - a model defined in Swagger"""  # noqa: E501

        self._authorization_code = None
        self._creation_date = None
        self._custom_credential_id = None
        self._domain = None
        self._expireson = None
        self._lastupdate_date = None
        self._username = None
        self.discriminator = None

        if authorization_code is not None:
            self.authorization_code = authorization_code
        if creation_date is not None:
            self.creation_date = creation_date
        if custom_credential_id is not None:
            self.custom_credential_id = custom_credential_id
        if domain is not None:
            self.domain = domain
        if expireson is not None:
            self.expireson = expireson
        if lastupdate_date is not None:
            self.lastupdate_date = lastupdate_date
        if username is not None:
            self.username = username

    @property
    def authorization_code(self):
        """Gets the authorization_code of this CustomCredentialsTO.  # noqa: E501


        :return: The authorization_code of this CustomCredentialsTO.  # noqa: E501
        :rtype: str
        """
        return self._authorization_code

    @authorization_code.setter
    def authorization_code(self, authorization_code):
        """Sets the authorization_code of this CustomCredentialsTO.


        :param authorization_code: The authorization_code of this CustomCredentialsTO.  # noqa: E501
        :type: str
        """

        self._authorization_code = authorization_code

    @property
    def creation_date(self):
        """Gets the creation_date of this CustomCredentialsTO.  # noqa: E501


        :return: The creation_date of this CustomCredentialsTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CustomCredentialsTO.


        :param creation_date: The creation_date of this CustomCredentialsTO.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def custom_credential_id(self):
        """Gets the custom_credential_id of this CustomCredentialsTO.  # noqa: E501


        :return: The custom_credential_id of this CustomCredentialsTO.  # noqa: E501
        :rtype: int
        """
        return self._custom_credential_id

    @custom_credential_id.setter
    def custom_credential_id(self, custom_credential_id):
        """Sets the custom_credential_id of this CustomCredentialsTO.


        :param custom_credential_id: The custom_credential_id of this CustomCredentialsTO.  # noqa: E501
        :type: int
        """

        self._custom_credential_id = custom_credential_id

    @property
    def domain(self):
        """Gets the domain of this CustomCredentialsTO.  # noqa: E501


        :return: The domain of this CustomCredentialsTO.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CustomCredentialsTO.


        :param domain: The domain of this CustomCredentialsTO.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def expireson(self):
        """Gets the expireson of this CustomCredentialsTO.  # noqa: E501


        :return: The expireson of this CustomCredentialsTO.  # noqa: E501
        :rtype: datetime
        """
        return self._expireson

    @expireson.setter
    def expireson(self, expireson):
        """Sets the expireson of this CustomCredentialsTO.


        :param expireson: The expireson of this CustomCredentialsTO.  # noqa: E501
        :type: datetime
        """

        self._expireson = expireson

    @property
    def lastupdate_date(self):
        """Gets the lastupdate_date of this CustomCredentialsTO.  # noqa: E501


        :return: The lastupdate_date of this CustomCredentialsTO.  # noqa: E501
        :rtype: datetime
        """
        return self._lastupdate_date

    @lastupdate_date.setter
    def lastupdate_date(self, lastupdate_date):
        """Sets the lastupdate_date of this CustomCredentialsTO.


        :param lastupdate_date: The lastupdate_date of this CustomCredentialsTO.  # noqa: E501
        :type: datetime
        """

        self._lastupdate_date = lastupdate_date

    @property
    def username(self):
        """Gets the username of this CustomCredentialsTO.  # noqa: E501


        :return: The username of this CustomCredentialsTO.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CustomCredentialsTO.


        :param username: The username of this CustomCredentialsTO.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomCredentialsTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomCredentialsTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

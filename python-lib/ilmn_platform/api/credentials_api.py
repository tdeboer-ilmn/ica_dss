# coding: utf-8

"""
    Platform Services API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ilmn_platform.api_client import ApiClient


class CredentialsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_credentials_using_post(self, authorization, credential_to, **kwargs):  # noqa: E501
        """Create Credentials.   # noqa: E501

        Update Credentials. (Authorization rules apply). Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credentials_using_post(authorization, credential_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param CredentialTO credential_to: credentialTO (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credentials_using_post_with_http_info(authorization, credential_to, **kwargs)  # noqa: E501
        else:
            (data) = self.create_credentials_using_post_with_http_info(authorization, credential_to, **kwargs)  # noqa: E501
            return data

    def create_credentials_using_post_with_http_info(self, authorization, credential_to, **kwargs):  # noqa: E501
        """Create Credentials.   # noqa: E501

        Update Credentials. (Authorization rules apply). Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credentials_using_post_with_http_info(authorization, credential_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param CredentialTO credential_to: credentialTO (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'credential_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credentials_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_credentials_using_post`")  # noqa: E501
        # verify the required parameter 'credential_to' is set
        if ('credential_to' not in params or
                params['credential_to'] is None):
            raise ValueError("Missing the required parameter `credential_to` when calling `create_credentials_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credential_to' in params:
            body_params = params['credential_to']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Credentials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_credentials_using_delete(self, authorization, id, **kwargs):  # noqa: E501
        """Remove Credentials.  # noqa: E501

        Delete Credentials. (Authorization rules apply). Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_credentials_using_delete(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_credentials_using_delete_with_http_info(authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_credentials_using_delete_with_http_info(authorization, id, **kwargs)  # noqa: E501
            return data

    def delete_credentials_using_delete_with_http_info(self, authorization, id, **kwargs):  # noqa: E501
        """Remove Credentials.  # noqa: E501

        Delete Credentials. (Authorization rules apply). Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_credentials_using_delete_with_http_info(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_credentials_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_credentials_using_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_credentials_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Credentials/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_credentials_using_delete(self, authorization, id, **kwargs):  # noqa: E501
        """Destroy Credentials.  # noqa: E501

        Completely remove credentials (hard delete). Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_credentials_using_delete(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_credentials_using_delete_with_http_info(authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_credentials_using_delete_with_http_info(authorization, id, **kwargs)  # noqa: E501
            return data

    def destroy_credentials_using_delete_with_http_info(self, authorization, id, **kwargs):  # noqa: E501
        """Destroy Credentials.  # noqa: E501

        Completely remove credentials (hard delete). Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_credentials_using_delete_with_http_info(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_credentials_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `destroy_credentials_using_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `destroy_credentials_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Credentials/Destroy/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_using_get(self, authorization, id, **kwargs):  # noqa: E501
        """Get Credentials.  # noqa: E501

        Retrieve all Credentials. Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_using_get_with_http_info(authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_using_get_with_http_info(authorization, id, **kwargs)  # noqa: E501
            return data

    def get_using_get_with_http_info(self, authorization, id, **kwargs):  # noqa: E501
        """Get Credentials.  # noqa: E501

        Retrieve all Credentials. Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get_with_http_info(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Credentials/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_credentials_using_get(self, authorization, **kwargs):  # noqa: E501
        """Search Credentials.  # noqa: E501

        Retrieve Credentials as per search criteria.  Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_credentials_using_get(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id
        :param str identity: identity
        :param int limit: Page Size
        :param str name: name
        :param int offset: Offset into the table
        :param str sort_by: property to sort by
        :param str sort_dir: Sort direction
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_credentials_using_get_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.search_credentials_using_get_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def search_credentials_using_get_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Search Credentials.  # noqa: E501

        Retrieve Credentials as per search criteria.  Refer https://confluence.illumina.com/display/PLAT/Getting+Started+with+Credential+Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_credentials_using_get_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param str id: id
        :param str identity: identity
        :param int limit: Page Size
        :param str name: name
        :param int offset: Offset into the table
        :param str sort_by: property to sort by
        :param str sort_dir: Sort direction
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id', 'identity', 'limit', 'name', 'offset', 'sort_by', 'sort_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_credentials_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `search_credentials_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'identity' in params:
            query_params.append(('identity', params['identity']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sortDir', params['sort_dir']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_credentials_using_put(self, authorization, credential_to, id, **kwargs):  # noqa: E501
        """Create Credentials.   # noqa: E501

        ${creds.put.notes}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credentials_using_put(authorization, credential_to, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param CredentialTO credential_to: credentialTO (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_credentials_using_put_with_http_info(authorization, credential_to, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_credentials_using_put_with_http_info(authorization, credential_to, id, **kwargs)  # noqa: E501
            return data

    def update_credentials_using_put_with_http_info(self, authorization, credential_to, id, **kwargs):  # noqa: E501
        """Create Credentials.   # noqa: E501

        ${creds.put.notes}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credentials_using_put_with_http_info(authorization, credential_to, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: UBT[psToken] or JWT Bearer token / ABT / Basic <clientID:clientSecret> (required)
        :param CredentialTO credential_to: credentialTO (required)
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'credential_to', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_credentials_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_credentials_using_put`")  # noqa: E501
        # verify the required parameter 'credential_to' is set
        if ('credential_to' not in params or
                params['credential_to'] is None):
            raise ValueError("Missing the required parameter `credential_to` when calling `update_credentials_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_credentials_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credential_to' in params:
            body_params = params['credential_to']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Credentials/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

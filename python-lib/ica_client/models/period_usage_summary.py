# coding: utf-8

"""
    Illumina Connected Analysis

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PeriodUsageSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'datetime',
        'end': 'datetime',
        'i_credit': 'int',
        'total_usages': 'list[ProductUsage]',
        'user_aggregated_usages': 'list[UserAggregatedUsage]'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'i_credit': 'iCredit',
        'total_usages': 'totalUsages',
        'user_aggregated_usages': 'userAggregatedUsages'
    }

    def __init__(self, start=None, end=None, i_credit=None, total_usages=None, user_aggregated_usages=None):  # noqa: E501
        """PeriodUsageSummary - a model defined in Swagger"""  # noqa: E501

        self._start = None
        self._end = None
        self._i_credit = None
        self._total_usages = None
        self._user_aggregated_usages = None
        self.discriminator = None

        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if i_credit is not None:
            self.i_credit = i_credit
        if total_usages is not None:
            self.total_usages = total_usages
        if user_aggregated_usages is not None:
            self.user_aggregated_usages = user_aggregated_usages

    @property
    def start(self):
        """Gets the start of this PeriodUsageSummary.  # noqa: E501


        :return: The start of this PeriodUsageSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PeriodUsageSummary.


        :param start: The start of this PeriodUsageSummary.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this PeriodUsageSummary.  # noqa: E501


        :return: The end of this PeriodUsageSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PeriodUsageSummary.


        :param end: The end of this PeriodUsageSummary.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def i_credit(self):
        """Gets the i_credit of this PeriodUsageSummary.  # noqa: E501


        :return: The i_credit of this PeriodUsageSummary.  # noqa: E501
        :rtype: int
        """
        return self._i_credit

    @i_credit.setter
    def i_credit(self, i_credit):
        """Sets the i_credit of this PeriodUsageSummary.


        :param i_credit: The i_credit of this PeriodUsageSummary.  # noqa: E501
        :type: int
        """

        self._i_credit = i_credit

    @property
    def total_usages(self):
        """Gets the total_usages of this PeriodUsageSummary.  # noqa: E501


        :return: The total_usages of this PeriodUsageSummary.  # noqa: E501
        :rtype: list[ProductUsage]
        """
        return self._total_usages

    @total_usages.setter
    def total_usages(self, total_usages):
        """Sets the total_usages of this PeriodUsageSummary.


        :param total_usages: The total_usages of this PeriodUsageSummary.  # noqa: E501
        :type: list[ProductUsage]
        """

        self._total_usages = total_usages

    @property
    def user_aggregated_usages(self):
        """Gets the user_aggregated_usages of this PeriodUsageSummary.  # noqa: E501


        :return: The user_aggregated_usages of this PeriodUsageSummary.  # noqa: E501
        :rtype: list[UserAggregatedUsage]
        """
        return self._user_aggregated_usages

    @user_aggregated_usages.setter
    def user_aggregated_usages(self, user_aggregated_usages):
        """Sets the user_aggregated_usages of this PeriodUsageSummary.


        :param user_aggregated_usages: The user_aggregated_usages of this PeriodUsageSummary.  # noqa: E501
        :type: list[UserAggregatedUsage]
        """

        self._user_aggregated_usages = user_aggregated_usages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodUsageSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodUsageSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

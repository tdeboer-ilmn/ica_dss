# coding: utf-8

"""
    Illumina Connected Analysis

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AWSS3ObjectStoreSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_name': 'str',
        'key_prefix': 'str'
    }

    attribute_map = {
        'bucket_name': 'bucketName',
        'key_prefix': 'keyPrefix'
    }

    def __init__(self, bucket_name=None, key_prefix=None):  # noqa: E501
        """AWSS3ObjectStoreSetting - a model defined in Swagger"""  # noqa: E501

        self._bucket_name = None
        self._key_prefix = None
        self.discriminator = None

        self.bucket_name = bucket_name
        if key_prefix is not None:
            self.key_prefix = key_prefix

    @property
    def bucket_name(self):
        """Gets the bucket_name of this AWSS3ObjectStoreSetting.  # noqa: E501

        The bucket name  # noqa: E501

        :return: The bucket_name of this AWSS3ObjectStoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this AWSS3ObjectStoreSetting.

        The bucket name  # noqa: E501

        :param bucket_name: The bucket_name of this AWSS3ObjectStoreSetting.  # noqa: E501
        :type: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")  # noqa: E501
        if bucket_name is not None and len(bucket_name) > 63:
            raise ValueError("Invalid value for `bucket_name`, length must be less than or equal to `63`")  # noqa: E501
        if bucket_name is not None and len(bucket_name) < 3:
            raise ValueError("Invalid value for `bucket_name`, length must be greater than or equal to `3`")  # noqa: E501

        self._bucket_name = bucket_name

    @property
    def key_prefix(self):
        """Gets the key_prefix of this AWSS3ObjectStoreSetting.  # noqa: E501

        Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize  access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash.  # noqa: E501

        :return: The key_prefix of this AWSS3ObjectStoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this AWSS3ObjectStoreSetting.

        Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize  access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash.  # noqa: E501

        :param key_prefix: The key_prefix of this AWSS3ObjectStoreSetting.  # noqa: E501
        :type: str
        """
        if key_prefix is not None and not re.search(r'^[^\/].*$', key_prefix):  # noqa: E501
            raise ValueError(r"Invalid value for `key_prefix`, must be a follow pattern or equal to `/^[^\/].*$/`")  # noqa: E501

        self._key_prefix = key_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AWSS3ObjectStoreSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWSS3ObjectStoreSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

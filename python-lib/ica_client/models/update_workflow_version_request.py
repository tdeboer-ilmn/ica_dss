# coding: utf-8

"""
    Illumina Connected Analysis

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateWorkflowVersionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'description': 'str',
        'language': 'WorkflowLanguage',
        'definition': 'object',
        'acl': 'list[str]',
        'status': 'str'
    }

    attribute_map = {
        'version': 'version',
        'description': 'description',
        'language': 'language',
        'definition': 'definition',
        'acl': 'acl',
        'status': 'status'
    }

    def __init__(self, version=None, description=None, language=None, definition=None, acl=None, status=None):  # noqa: E501
        """UpdateWorkflowVersionRequest - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._description = None
        self._language = None
        self._definition = None
        self._acl = None
        self._status = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if language is not None:
            self.language = language
        if definition is not None:
            self.definition = definition
        if acl is not None:
            self.acl = acl
        if status is not None:
            self.status = status

    @property
    def version(self):
        """Gets the version of this UpdateWorkflowVersionRequest.  # noqa: E501


        :return: The version of this UpdateWorkflowVersionRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateWorkflowVersionRequest.


        :param version: The version of this UpdateWorkflowVersionRequest.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this UpdateWorkflowVersionRequest.  # noqa: E501


        :return: The description of this UpdateWorkflowVersionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateWorkflowVersionRequest.


        :param description: The description of this UpdateWorkflowVersionRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def language(self):
        """Gets the language of this UpdateWorkflowVersionRequest.  # noqa: E501


        :return: The language of this UpdateWorkflowVersionRequest.  # noqa: E501
        :rtype: WorkflowLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UpdateWorkflowVersionRequest.


        :param language: The language of this UpdateWorkflowVersionRequest.  # noqa: E501
        :type: WorkflowLanguage
        """

        self._language = language

    @property
    def definition(self):
        """Gets the definition of this UpdateWorkflowVersionRequest.  # noqa: E501


        :return: The definition of this UpdateWorkflowVersionRequest.  # noqa: E501
        :rtype: object
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this UpdateWorkflowVersionRequest.


        :param definition: The definition of this UpdateWorkflowVersionRequest.  # noqa: E501
        :type: object
        """

        self._definition = definition

    @property
    def acl(self):
        """Gets the acl of this UpdateWorkflowVersionRequest.  # noqa: E501


        :return: The acl of this UpdateWorkflowVersionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this UpdateWorkflowVersionRequest.


        :param acl: The acl of this UpdateWorkflowVersionRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    @property
    def status(self):
        """Gets the status of this UpdateWorkflowVersionRequest.  # noqa: E501

        New Status for workflow version  # noqa: E501

        :return: The status of this UpdateWorkflowVersionRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateWorkflowVersionRequest.

        New Status for workflow version  # noqa: E501

        :param status: The status of this UpdateWorkflowVersionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "released", "obsolete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateWorkflowVersionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateWorkflowVersionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
